/*  TODO
[x] load gfx files
[x] draw gfx to screen
[x] select palette
[ ] list of sprites and their palette/location/compatibility
[ ] select which sprites you want to include
[ ] detect conflicts
[ ] create exgfx based on selection
[ ] save exgfx file


[ ] search bar
[ ] categories - castle, koopas, powerups, etc
[ ] sprite images
[ ] "passable" conflict detection (pokey head football, bone spiny etc)
[ ]     show all animation frames, variations etc
[ ] checkbox for lava particles


[ ] load custom pal files
[ ] remap sprite locations? (for use with STEAR etc)
[ ] custom sprites?

*/
const hexPalettes = [
    ["#0000", "#f8f8f8", "#000000", "#885818", "#d8a038", "#f8d870", "#f8c898", "#e800b0", "#500000", "#f84070", "#203088", "#408098", "#80d8c8", "#b02860", "#f87068", "#f8f800"],
    ["#0000", "#f8f8f8", "#000000", "#707070", "#a0a0a0", "#c0c0c0", "#e0e0e0", "#f81058", "#0000", "#f8f8f8", "#000000", "#00c800", "#b00000", "#f80000", "#f85800", "#f8a000"],
    ["#0000", "#f8f8f8", "#000000", "#f87800", "#f8c000", "#f8f800", "#b82800", "#f88800", "#0000", "#f8f8f8", "#000000", "#00c800", "#e81868", "#f040a8", "#f878c8", "#f8c0f0"],
    ["#0000", "#f8f8f8", "#000000", "#4040d8", "#6868d8", "#8888f8", "#b82800", "#f88800", "#0000", "#f8f8f8", "#000000", "#00c800", "#00e000", "#88f838", "#c8f800", "#f8f898"],
    ["#0000", "#f8f8f8", "#000000", "#880000", "#b80000", "#f80000", "#b82800", "#f88800", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#007800", "#00b800", "#00f800", "#b82800", "#f88800", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#005050", "#007878", "#00a0a0", "#b82800", "#f88800", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#707070", "#a0a0a0", "#c0c0c0", "#b82800", "#f88800", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#a00868", "#d00888", "#f860c8", "#b04000", "#f89800", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#d8f8c0", "#60c000", "#588000", "#a84828", "#f89030", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#283048", "#485058", "#686858", "#989040", "#c0c078", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#184848", "#207068", "#288878", "#30a088", "#38b898", "#f80080", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#307080", "#a0d0e0", "#d0f8f8", "#e8f8f8", "#4040d8", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#706858", "#908878", "#b0a890", "#c8b8a0", "#983858", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#8098f8", "#98b0f8", "#b0c8f8", "#c8e0f8", "#f80080", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#f8b098", "#f0b0b0", "#e8a8c8", "#e098e0", "#f80080", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#5858a0", "#689898", "#98e898", "#f82860", "#e8c068", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#908858", "#688090", "#402020", "#505040", "#685850", "#787078", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"],
    ["#0000", "#f8f8f8", "#000000", "#a8f8f8", "#b8f8f8", "#c8f8f8", "#c8f8f8", "#e0f8f8", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000", "#000000"]
];

const rgbaPalettes = [
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [136, 88, 24, 255], [216, 160, 56, 255], [248, 216, 112, 255], [248, 200, 152, 255], [232, 0, 176, 255], [80, 0, 0, 255], [248, 64, 112, 255], [32, 48, 136, 255], [64, 128, 152, 255], [128, 216, 200, 255], [176, 40, 96, 255], [248, 112, 104, 255], [248, 248, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [112, 112, 112, 255], [160, 160, 160, 255], [192, 192, 192, 255], [224, 224, 224, 255], [248, 16, 88, 255], [0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [0, 200, 0, 255], [176, 0, 0, 255], [248, 0, 0, 255], [248, 88, 0, 255], [248, 160, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [248, 120, 0, 255], [248, 192, 0, 255], [248, 248, 0, 255], [184, 40, 0, 255], [248, 136, 0, 255], [0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [0, 200, 0, 255], [232, 24, 104, 255], [240, 64, 168, 255], [248, 120, 200, 255], [248, 192, 240, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [64, 64, 216, 255], [104, 104, 216, 255], [136, 136, 248, 255], [184, 40, 0, 255], [248, 136, 0, 255], [0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [0, 200, 0, 255], [0, 224, 0, 255], [136, 248, 56, 255], [200, 248, 0, 255], [248, 248, 152, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [136, 0, 0, 255], [184, 0, 0, 255], [248, 0, 0, 255], [184, 40, 0, 255], [248, 136, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [0, 120, 0, 255], [0, 184, 0, 255], [0, 248, 0, 255], [184, 40, 0, 255], [248, 136, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [0, 80, 80, 255], [0, 120, 120, 255], [0, 160, 160, 255], [184, 40, 0, 255], [248, 136, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [112, 112, 112, 255], [160, 160, 160, 255], [192, 192, 192, 255], [184, 40, 0, 255], [248, 136, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [160, 8, 104, 255], [208, 8, 136, 255], [248, 96, 200, 255], [176, 64, 0, 255], [248, 152, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [216, 248, 192, 255], [96, 192, 0, 255], [88, 128, 0, 255], [168, 72, 40, 255], [248, 144, 48, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [40, 48, 72, 255], [72, 80, 88, 255], [104, 104, 88, 255], [152, 144, 64, 255], [192, 192, 120, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [24, 72, 72, 255], [32, 112, 104, 255], [40, 136, 120, 255], [48, 160, 136, 255], [56, 184, 152, 255], [248, 0, 128, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [48, 112, 128, 255], [160, 208, 224, 255], [208, 248, 248, 255], [232, 248, 248, 255], [64, 64, 216, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [112, 104, 88, 255], [144, 136, 120, 255], [176, 168, 144, 255], [200, 184, 160, 255], [152, 56, 88, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [128, 152, 248, 255], [152, 176, 248, 255], [176, 200, 248, 255], [200, 224, 248, 255], [248, 0, 128, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [248, 176, 152, 255], [240, 176, 176, 255], [232, 168, 200, 255], [224, 152, 224, 255], [248, 0, 128, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [88, 88, 160, 255], [104, 152, 152, 255], [152, 232, 152, 255], [248, 40, 96, 255], [232, 192, 104, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [144, 136, 88, 255], [104, 128, 144, 255], [64, 32, 32, 255], [80, 80, 64, 255], [104, 88, 80, 255], [120, 112, 120, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
    [[0, 0, 0, 0], [248, 248, 248, 255], [0, 0, 0, 255], [168, 248, 248, 255], [184, 248, 248, 255], [200, 248, 248, 255], [200, 248, 248, 255], [224, 248, 248, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]]
]

// generate rgba palettes from hexPalettes
/*
console.log(hexPalettes.map(palette => `[${palette.map(hex => {
    var c;
    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
        c = hex.substring(1).split('');
        if (c.length == 3) {
            c = [c[0], c[0], c[1], c[1], c[2], c[2]];
        }
        c = '0x' + c.join('');
        return '[' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',1]\n';
    }
    return '[0,0,0,0]\n'
}).join()
    }]`).join());
*/

const gfxFileNames = ["GFX00", "GFX01", "GFX02", "GFX03", "GFX04", "GFX05", "GFX06", "GFX09", "GFX0A", "GFX0D", "GFX0E", "GFX0F", "GFX11", "GFX12", "GFX13", "GFX20", "GFX22", "GFX23", "GFX24", "GFX25"]

//  ==============================================================

let activePaletteIndex = 2;
const allGfx = [];
const gfxIndexes = [0, 1, 2, 3]
const gfxBitmaps = [];

//  ==============================================================


//  ==============================================================

window.onload = async function () {
    // load cached palettes, gfx etc...

    // populate palette select
    const paletteSelect = document.getElementById("paletteSelect")
    for (let i = 0; i < hexPalettes.length; i++) {
        const option = new Option(`Palette ${i}`, i)
        paletteSelect.appendChild(option)
    }
    paletteSelect.onchange = function (e) {
        activePaletteIndex = +(e.target.value)
        refreshBitmaps()
    }

    // populate gfx select
    const gfxSelects = [
        document.getElementById("gfx0Select"),
        document.getElementById("gfx1Select"),
        document.getElementById("gfx2Select"),
        document.getElementById("gfx3Select")
    ]
    for (let i = 0; i < gfxSelects.length; i++) {
        const select = gfxSelects[i];
        
        for (let j = 0; j < gfxFileNames.length; j++) {
            select.appendChild(new Option(gfxFileNames[j], j));
        }
        select.value = gfxIndexes[i];
        select.onchange = async function (e) {
            gfxIndexes[i] = +(e.target.value);
            refreshBitmaps();
        }
    }

    // import GFX files
    for (let i = 0; i < gfxFileNames.length; i++) {
        const blob = await fetch(`/gfx/${gfxFileNames[i]}.bin`);
        loadGfxFile(blob, gfxFileNames[i]);
    };

    refreshBitmaps();
};

function loadGfxFile(blob, name) {
    blob.arrayBuffer().then(((arrayBuffer) => {
        const snesBytes = new Int8Array(arrayBuffer);

        const pixels = snesToPixels(snesBytes);

        allGfx.push({ name, pixels });
    }))
}

function drawPixelsToCanvas() {
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    ctx.reset()
    ctx.resetTransform()
    ctx.scale(2, 2)
    ctx.imageSmoothingEnabled = false;

    for (let i = 0; i < 4; ++i) {
        const bitmap = gfxBitmaps[i];
        if (bitmap) {
            ctx.drawImage(bitmap, 0, i * 72)
        }
    }
}

async function refreshBitmaps() {
    return new Promise(async (resolve) => {
        for (let i = 0; i < 4; ++i) {
            await updateBitmap(allGfx[gfxIndexes[i]].pixels, rgbaPalettes[activePaletteIndex], i)
        }
        drawPixelsToCanvas()
        resolve()
    })
}

async function updateBitmap(pixels, palette, slot) {
    return new Promise((resolve) => {
        const colorData = pixels.map((index) => (palette[index])).flat() //
        const uintColorData = new Uint8ClampedArray(colorData)
        const imageData = new ImageData(uintColorData, 128)
        // save to slot
        createImageBitmap(imageData).then((bitmap) => {
            // throw out old bitmap
            gfxBitmaps[slot]?.close?.()
            gfxBitmaps[slot] = bitmap
            resolve(bitmap)
        })
    })
}

// modified from https://sneslab.net/wiki/Graphics_Format
function snesToPixels(snesBytes) {
    if (snesBytes.length % 32 > 0) {
        return []
    }

    let b0, b1, b2, b3, p, mul
    let pixels = []
    let spriteIndex = 0
    while (spriteIndex * 32 < snesBytes.length) {
        for (let i = 0; i < 8; i++) {
            mul = 1;
            b0 = snesBytes[spriteIndex * 32 + i * 2];
            b1 = snesBytes[spriteIndex * 32 + i * 2 + 1];
            b2 = snesBytes[spriteIndex * 32 + i * 2 + 16];
            b3 = snesBytes[spriteIndex * 32 + i * 2 + 17];
            for (let j = 0; j < 8; j++) {
                p = ((b0 & mul) | ((b1 & mul) << 1) | ((b2 & mul) << 2) | ((b3 & mul) << 3)) >> j;
                mul <<= 1;
                const x = (spriteIndex % 16) * 8 + 7 - j
                const y = Math.floor(spriteIndex / 16) * 8 + i
                pixels[x + y * 128] = p
            }
        }
        spriteIndex++;
    }

    return pixels
    // for (let spriteIndex = 0; spriteIndex <= mainIndexLimit; spriteIndex += 32) {
    //     srcIndex = (mainIndex << 5);
    //     if (srcIndex + 31 >= src.length)
    //         return dest;
    //     destX = srcIndex & 0x0F;
    //     destY = srcIndex >> 4;
    //     destIndex = ((destY << 7) + destX) << 3;
    //     if (destIndex + 903 >= dest.length)
    //         return dest;
    //     for (let i = 0; i < 16; i += 2) {
    //         mul = 1;
    //         b0 = src[srcIndex + i];
    //         b1 = src[srcIndex + i + 1];
    //         b2 = src[srcIndex + i + 16];
    //         b3 = src[srcIndex + i + 17];
    //         for (let j = 0; j < 8; j++) {
    //             res = ((b0 & mul) | ((b1 & mul) << 1) | ((b2 & mul) << 2) | ((b3 & mul) << 3)) >> j
    //             dest[destIndex + (7 - j) + yAdder] = res;
    //             mul <<= 1;
    //         }
    //         yAdder += 128;
    //     }
    // }
}

